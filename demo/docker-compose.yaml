##version: "3.8"
#
#services:
#  # PostgreSQL Database
#  postgres:
#    image: postgres:16-alpine
#    container_name: spring-postgres
#    env_file:
#      - .env
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#    ports:
#      # For local dev: expose DB to host. For production, remove this line.
#      - "${POSTGRES_PORT}:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    networks:
#      - spring-network
#    healthcheck:
#      # Use shell so $VARS expand inside the container
#      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h localhost"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  # Redis Cache
#  redis:
#    image: redis:7-alpine
#    container_name: spring-redis
#    env_file:
#      - .env
#    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
#    ports:
#      # For local dev: expose Redis to host. For production, remove this line.
#      - "${REDIS_PORT}:6379"
#    volumes:
#      - redis_data:/data
#    networks:
#      - spring-network
#    healthcheck:
#      # Use shell so the password expands
#      test: ["CMD-SHELL", "redis-cli -a \"$REDIS_PASSWORD\" PING | grep -q PONG"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  # Spring Boot Application
#  app:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: spring-boot-app
#    env_file:
#      - .env
#    environment:
#      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
#      # DB
#      DATABASE_URL: ${DATABASE_URL}
#      DATABASE_USERNAME: ${DATABASE_USERNAME}
#      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#      # Redis
#      REDIS_HOST: ${REDIS_HOST}
#      REDIS_PORT: ${REDIS_PORT}
#      REDIS_PASSWORD: ${REDIS_PASSWORD}
#      REDIS_DATABASE: ${REDIS_DB}
#      # JWT
#      JWT_SECRET: ${JWT_SECRET}
#      JWT_EXPIRATION: ${JWT_EXPIRATION}
#      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION}
#      # Optional: Telegram
#      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
#      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
#    ports:
#      - "8080:8080"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    networks:
#      - spring-network
#    restart: unless-stopped
#
#networks:
#  spring-network:
#    driver: bridge
#
#volumes:
#  postgres_data:
#  redis_data:

#=========

version: "3.8"
services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5431:5432"
    networks:
      - postgres
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass MyVerySecurePassword
    volumes:
      - cache:/data

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  cache:
    driver: local
