#version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: spring-postgres
    environment:
      POSTGRES_DB: demo-production
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d demo-production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: spring-redis
    command: redis-server --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spring-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-boot-app
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_URL: jdbc:postgresql://postgres:5432/demo-production
      DATABASE_USERNAME: admin
      DATABASE_PASSWORD: admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      REDIS_DATABASE: 0
      JWT_SECRET: 388c81c79cada4abd82f6cd6a1b76de8eb0c156009f98137e4c41064430eabdd
      JWT_EXPIRATION: 3600000
      JWT_REFRESH_TOKEN_EXPIRATION: 3
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - spring-network
    restart: unless-stopped

networks:
  spring-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: